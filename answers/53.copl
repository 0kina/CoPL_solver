|- let fact = fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1) in fact fact 3 evalto 6 by E-Let {
  |- fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1) evalto ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-Fun {};
  env1 |- fact fact 3 evalto 6 by E-App {
    env1 |- fact fact evalto (env2)[fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-App {
      env1 |- fact evalto ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-Var1 {};
      env1 |- fact evalto ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-Var1 {};
      env2 |- fun n -> if n < 2 then 1 else n * self self (n - 1) evalto (env2)[fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-Fun {}
    };
    env1 |- 3 evalto 3 by E-Int {};
    env3 |- if n < 2 then 1 else n * self self (n - 1) evalto 6 by E-IfF {
      env3 |- n < 2 evalto false by E-Lt {
        env3 |- n evalto 3 by E-Var1 {};
        env3 |- 2 evalto 2 by E-Int {};
        3 less than 2 is false by B-Lt {}
      };
      env3 |- n * self self (n - 1) evalto 6 by E-Times {
        env3 |- n evalto 3 by E-Var1 {};
        env3 |- self self (n - 1) evalto 2 by E-App {
          env3 |- self self evalto (env2)[fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-App {
            env3 |- self evalto ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-Var2 {
              env2 |- self evalto ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-Var1 {}
            };
            env3 |- self evalto ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-Var2 {
              env2 |- self evalto ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-Var1 {}
            };
            env2 |- fun n -> if n < 2 then 1 else n * self self (n - 1) evalto (env2)[fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-Fun {}
          };
          env3 |- n - 1 evalto 2 by E-Minus {
            env3 |- n evalto 3 by E-Var1 {};
            env3 |- 1 evalto 1 by E-Int {};
            3 minus 1 is 2 by B-Minus {}
          };
          env4 |- if n < 2 then 1 else n * self self (n - 1) evalto 2 by E-IfF {
            env4 |- n < 2 evalto false by E-Lt {
              env4 |- n evalto 2 by E-Var1 {};
              env4 |- 2 evalto 2 by E-Int {};
              2 less than 2 is false by B-Lt {}
            };
            env4 |- n * self self (n - 1) evalto 2 by E-Times {
              env4 |- n evalto 2 by E-Var1 {};
              env4 |- self self (n - 1) evalto 1 by E-App {
                env4 |- self self evalto (env2)[fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-App {
                  env4 |- self evalto ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-Var2 {
                    env2 |- self evalto ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-Var1 {}
                  };
                  env4 |- self evalto ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-Var2 {
                    env2 |- self evalto ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-Var1 {}
                  };
                  env2 |- fun n -> if n < 2 then 1 else n * self self (n - 1) evalto (env2)[fun n -> if n < 2 then 1 else n * self self (n - 1)] by E-Fun {}
                };
                env4 |- n - 1 evalto 1 by E-Minus {
                  env4 |- n evalto 2 by E-Var1 {};
                  env4 |- 1 evalto 1 by E-Int {};
                  2 minus 1 is 1 by B-Minus {}
                };
                env5 |- if n < 2 then 1 else n * self self (n - 1) evalto 1 by E-IfT {
                  env5 |- n < 2 evalto true by E-Lt {
                    env5 |- n evalto 1 by E-Var1 {};
                    env5 |- 2 evalto 2 by E-Int {};
                    1 less than 2 is true by B-Lt {}
                  };
                  env5 |- 1 evalto 1 by E-Int {};
                }
              };
              2 times 1 is 2 by B-Times {}
            }
          }
        };
        3 times 2 is 6 by B-Times {}
      }
    }
  }
}

//envs start
env1: fact = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)]
env2: self = ()[fun self -> fun n -> if n < 2 then 1 else n * self self (n - 1)]
env3: env2, n = 3
env4: env2, n = 2
env5: env2, n = 1